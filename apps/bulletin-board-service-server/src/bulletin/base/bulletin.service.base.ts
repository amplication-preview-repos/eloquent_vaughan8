/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bulletin as PrismaBulletin,
  Image as PrismaImage,
} from "@prisma/client";

export class BulletinServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BulletinCountArgs, "select">): Promise<number> {
    return this.prisma.bulletin.count(args);
  }

  async bulletins(
    args: Prisma.BulletinFindManyArgs
  ): Promise<PrismaBulletin[]> {
    return this.prisma.bulletin.findMany(args);
  }
  async bulletin(
    args: Prisma.BulletinFindUniqueArgs
  ): Promise<PrismaBulletin | null> {
    return this.prisma.bulletin.findUnique(args);
  }
  async createBulletin(
    args: Prisma.BulletinCreateArgs
  ): Promise<PrismaBulletin> {
    return this.prisma.bulletin.create(args);
  }
  async updateBulletin(
    args: Prisma.BulletinUpdateArgs
  ): Promise<PrismaBulletin> {
    return this.prisma.bulletin.update(args);
  }
  async deleteBulletin(
    args: Prisma.BulletinDeleteArgs
  ): Promise<PrismaBulletin> {
    return this.prisma.bulletin.delete(args);
  }

  async findImages(
    parentId: string,
    args: Prisma.ImageFindManyArgs
  ): Promise<PrismaImage[]> {
    return this.prisma.bulletin
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .images(args);
  }
}
