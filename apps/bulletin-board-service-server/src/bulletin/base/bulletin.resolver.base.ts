/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bulletin } from "./Bulletin";
import { BulletinCountArgs } from "./BulletinCountArgs";
import { BulletinFindManyArgs } from "./BulletinFindManyArgs";
import { BulletinFindUniqueArgs } from "./BulletinFindUniqueArgs";
import { CreateBulletinArgs } from "./CreateBulletinArgs";
import { UpdateBulletinArgs } from "./UpdateBulletinArgs";
import { DeleteBulletinArgs } from "./DeleteBulletinArgs";
import { ImageFindManyArgs } from "../../image/base/ImageFindManyArgs";
import { Image } from "../../image/base/Image";
import { BulletinService } from "../bulletin.service";
@graphql.Resolver(() => Bulletin)
export class BulletinResolverBase {
  constructor(protected readonly service: BulletinService) {}

  async _bulletinsMeta(
    @graphql.Args() args: BulletinCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bulletin])
  async bulletins(
    @graphql.Args() args: BulletinFindManyArgs
  ): Promise<Bulletin[]> {
    return this.service.bulletins(args);
  }

  @graphql.Query(() => Bulletin, { nullable: true })
  async bulletin(
    @graphql.Args() args: BulletinFindUniqueArgs
  ): Promise<Bulletin | null> {
    const result = await this.service.bulletin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bulletin)
  async createBulletin(
    @graphql.Args() args: CreateBulletinArgs
  ): Promise<Bulletin> {
    return await this.service.createBulletin({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bulletin)
  async updateBulletin(
    @graphql.Args() args: UpdateBulletinArgs
  ): Promise<Bulletin | null> {
    try {
      return await this.service.updateBulletin({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bulletin)
  async deleteBulletin(
    @graphql.Args() args: DeleteBulletinArgs
  ): Promise<Bulletin | null> {
    try {
      return await this.service.deleteBulletin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Image], { name: "images" })
  async findImages(
    @graphql.Parent() parent: Bulletin,
    @graphql.Args() args: ImageFindManyArgs
  ): Promise<Image[]> {
    const results = await this.service.findImages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
